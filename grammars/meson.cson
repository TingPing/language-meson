name: "Meson"
scopeName: "source.meson"
author: "Patrick Griffis"
fileTypes: [
  "meson.build"
  "meson_options.txt"
]
uuid: "b3713e1e-4289-4e0c-88af-79e8876e5adb"
patterns: [
  {
    match: "\\#.*$"
    name: "comment.line.meson"
  }
  {
    include: "#string_quoted_single"
  }
  {
    match: "\\b(elif|else|if|endif)\\b"
    name: "keyword.control.conditional.meson"
  }
  {
    match: "\\b(foreach|endforeach)\\b"
    name: "keyword.control.repeat.meson"
  }
  {
    match: "\\b(continue|break)\\b"
    name: "keyword.control.statement.meson"
  }
  {
    match: "\\b(and|not|or|in)\\b"
    name: "keyword.operator.logical.meson"
  }
  {
    match: "\\b(true|false)\\b"
    name: "constant.language.meson"
  }
  {
    match: "\\b(?i:(0x[[:xdigit:]]+))"
    name: "constant.numeric.integer.hexadecimal.meson"
  }
  {
    match: "\\b(?i:(0o?[0-7]+))"
    name: "constant.numeric.integer.octal.meson"
  }
  {
    match: "\\b(?i:(0b[01]+))"
    name: "constant.numeric.integer.binary.meson"
  }
  {
    match: "\\b([1-9]+[0-9]*|0)"
    name: "constant.numeric.integer.decimal.meson"
  }
  {
    match: "\\b(meson|build_machine|host_machine|target_machine)\\b"
    name: "support.variable.meson"
  }
  {
    match: "\\b([\\w_]+)\\s*(?=:)"
    name: "variable.parameter.function.keyword.meson"
  }
  {
    match: "<\\=|>\\=|\\=\\=|<|>|\\!\\="
    name: "keyword.operator.comparison.meson"
  }
  {
    match: "\\+\\="
    name: "keyword.operator.assignment.augmented.meson"
  }
  {
    match: "\\="
    name: "keyword.operator.assignment.meson"
  }
  {
    match: "\\+|\\-|\\*|%|\\/"
    name: "keyword.operator.arithmetic.meson"
  }
  {
    match: '''(?x)
      \\b(add_global_arguments|add_global_link_arguments|add_languages|
      add_project_arguments|add_project_link_arguments|add_test_setup|
      alias_target|assert|benchmark|both_libraries|build_target|
      configuration_data|configure_file|custom_target|declare_dependency|
      dependency|disabler|environment|error|executable|files|find_library|
      find_program|generator|get_option|get_variable|gettext|import|
      include_directories|install_data|install_headers|install_man|
      install_subdir|is_disabler|is_variable|jar|join_paths|library|message|
      option|project|run_command|run_target|set_variable|shared_library|
      shared_module|static_library|subdir|subdir_done|subproject|summary|test|
      vcs_tag|warning)\\b\\s*(?=\\()
    '''
    name: "support.function.builtin.meson"
  }
]
repository:
  escaped_character:
    captures:
      "1":
        name: "constant.character.escape.backlash.meson"
      "2":
        name: "constant.character.escape.single-quote.meson"
      "3":
        name: "constant.character.escape.bell.meson"
      "4":
        name: "constant.character.escape.backspace.meson"
      "5":
        name: "constant.character.escape.formfeed.meson"
      "6":
        name: "constant.character.escape.linefeed.meson"
      "7":
        name: "constant.character.escape.return.meson"
      "8":
        name: "constant.character.escape.tab.meson"
      "9":
        name: "constant.character.escape.vertical-tab.meson"
      "10":
        name: "constant.character.escape.octal.meson"
      "11":
        name: "constant.character.escape.hex.meson"
      "12":
        name: "constant.character.escape.unicode.16-bit-hex.meson"
      "13":
        name: "constant.character.escape.unicode.32-bit-hex.meson"
      "14":
        name: "constant.character.escape.unicode.name.meson"
    match: '''(?x)
      (\\\\\\\\)|
      (\\\\')|
      (\\\\a)|
      (\\\\b)|
      (\\\\f)|
      (\\\\n)|
      (\\\\r)|
      (\\\\t)|
      (\\\\v)|
      (\\\\[0-7]{1,3})|
      (\\\\x[[:xdigit:]]{2})|
      (\\\\u[[:xdigit:]]{4})|
      (\\\\U[[:xdigit:]]{8})|
      (\\\\N\\{[[:alpha:] ]+\\})
    '''
  string_quoted_single:
    patterns: [
      {
        captures:
          "1":
            name: "puncutation.definition.string.begin.meson"
          "2":
            name: "puncutation.definition.string.end.meson"
          "3":
            name: "meta.empty-string.single.meson"
        match: "(?<!')(')(('))(?!')"
        name: "string.quoted.single.single-line.meson"
      }
      {
        begin: "(''')"
        beginCaptures:
          "1":
            name: "punctuation.definition.string.begin.meson"
        end: "((?<=''')(')''|''')"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.meson"
          "2":
            name: "meta.empty-string.single.meson"
        name: "string.quoted.single.block.meson"
        patterns: [
          {
            include: "#escaped_character"
          }
        ]
      }
      {
        begin: "(')"
        beginCaptures:
          "1":
            name: "punctuation.definition.string.begin.meson"
        end: "(')|(\\n)"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.meson"
          "2":
            name: "invalid.illegal.unclosed-string.meson"
        name: "string.quoted.single.single-line.meson"
        patterns: [
          {
            include: "#escaped_character"
          }
        ]
      }
    ]
